{"version":3,"file":"714-d0809ef8bc8a0679bc15.js","mappings":"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","sources":["webpack://styled-gatsby-starter/./node_modules/react-lite-youtube-embed/dist/index.es.jsx","webpack://styled-gatsby-starter/./src/containers/VideoModal.js"],"sourcesContent":["/**\n* react-lite-youtube-embed v2.0.3\n*  https://github.com/ibrahimcesar/react-lite-youtube-embed.git\n*\n*  Copyright (c) Ibrahim Cesar < email@ibrahimcesar.com > and project contributors.\n*\n*  This source code is licensed under the MIT license found in the\n*  LICENSE file in the root directory of this source tree.\n*\n*  Author site: https://ibrahimcesar.cloud\n*/\n    import * as React from 'react';\nimport { useState } from 'react';\n\nfunction LiteYouTubeEmbed(props) {\r\n    var _a = useState(false), preconnected = _a[0], setPreconnected = _a[1];\r\n    var _b = useState(false), iframe = _b[0], setIframe = _b[1];\r\n    var videoId = encodeURIComponent(props.id);\r\n    var videoPlaylisCovertId = typeof props.playlistCoverId === 'string' ? encodeURIComponent(props.playlistCoverId) : null;\r\n    var videoTitle = props.title;\r\n    var posterImp = props.poster || \"hqdefault\";\r\n    var paramsImp = \"&\" + props.params || \"\";\r\n    var posterUrl = !props.playlist ?\r\n        \"https://i.ytimg.com/vi/\" + videoId + \"/\" + posterImp + \".jpg\" :\r\n        \"https://i.ytimg.com/vi/\" + videoPlaylisCovertId + \"/\" + posterImp + \".jpg\";\r\n    var ytUrl = props.noCookie\r\n        ? \"https://www.youtube-nocookie.com\"\r\n        : \"https://www.youtube.com\";\r\n    ytUrl = props.cookie\r\n        ? \"https://www.youtube.com\"\r\n        : \"https://www.youtube-nocookie.com\";\r\n    var iframeSrc = !props.playlist\r\n        ? ytUrl + \"/embed/\" + videoId + \"?autoplay=1\" + paramsImp\r\n        : ytUrl + \"/embed/videoseries?autoplay=1&list=\" + videoId + paramsImp;\r\n    var activatedClassImp = props.activatedClass || \"lyt-activated\";\r\n    var adNetworkImp = props.adNetwork || false;\r\n    var iframeClassImp = props.iframeClass || \"\";\r\n    var playerClassImp = props.playerClass || \"lty-playbtn\";\r\n    var wrapperClassImp = props.wrapperClass || \"yt-lite\";\r\n    var onIframeAdded = props.onIframeAdded || function () { };\r\n    var warmConnections = function () {\r\n        if (preconnected)\r\n            return;\r\n        setPreconnected(true);\r\n    };\r\n    var addIframe = function () {\r\n        if (iframe)\r\n            return;\r\n        onIframeAdded();\r\n        setIframe(true);\r\n    };\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(\"link\", { rel: \"preload\", href: posterUrl, as: \"image\" }),\r\n        React.createElement(React.Fragment, null, preconnected && (React.createElement(React.Fragment, null,\r\n            React.createElement(\"link\", { rel: \"preconnect\", href: ytUrl }),\r\n            React.createElement(\"link\", { rel: \"preconnect\", href: \"https://www.google.com\" }),\r\n            adNetworkImp && (React.createElement(React.Fragment, null,\r\n                React.createElement(\"link\", { rel: \"preconnect\", href: \"https://static.doubleclick.net\" }),\r\n                React.createElement(\"link\", { rel: \"preconnect\", href: \"https://googleads.g.doubleclick.net\" })))))),\r\n        React.createElement(\"div\", { onPointerOver: warmConnections, onClick: addIframe, className: wrapperClassImp + \" \" + (iframe && activatedClassImp), \"data-title\": videoTitle, style: { backgroundImage: \"url(\" + posterUrl + \")\" } },\r\n            React.createElement(\"div\", { className: playerClassImp }),\r\n            iframe && (React.createElement(\"iframe\", { className: iframeClassImp, title: videoTitle, width: \"560\", height: \"315\", frameBorder: \"0\", allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\", allowFullScreen: true, src: iframeSrc })))));\r\n}\n\nexport default LiteYouTubeEmbed;\n//# sourceMappingURL=index.es.jsx.map\n","import React, { useCallback, useEffect, useRef } from 'react'\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n} from \"@chakra-ui/react\"\r\nimport LiteYouTubeEmbed from 'react-lite-youtube-embed';\r\nimport 'react-lite-youtube-embed/dist/LiteYouTubeEmbed.css'\r\n\r\nimport { trackVideo } from '../utils/trackEvent';\r\n\r\n// import Box from '../components/Box'\r\nconst progress = [10, 25, 50, 75, 90]\r\n\r\nconst VideoModal = ({ isOpen, onClose }) => {\r\n  const ref = useRef()\r\n  const timer = useRef()\r\n  const loadIframAPI = useCallback(() => {\r\n    const scriptID = 'iframe-api'\r\n    let player;\r\n    let tracked = {}\r\n    const handleStateChange = (e) => {\r\n      if (e.data === window.YT.PlayerState.PLAYING) {\r\n        const playerTotalTime = player.getDuration();\r\n        timer.current = setInterval(() => {\r\n          const playerCurrentTime = player.getCurrentTime();\r\n\r\n          const playerProgress = (playerCurrentTime / playerTotalTime) * 100;\r\n          progress.every((p) => {\r\n            if (tracked[p]) return true\r\n            if (playerProgress >= p) {\r\n              trackVideo(p)\r\n              tracked[p] = true\r\n            }\r\n            return false\r\n          })\r\n        }, 500);\r\n      } else {\r\n        clearInterval(timer.current);\r\n      }\r\n    }\r\n\r\n    const init = () => {\r\n      const iframeRef = ref.current.querySelector('.yt-iframe')\r\n      player = new window.YT.Player(iframeRef, {\r\n        events: {\r\n          onStateChange: handleStateChange\r\n        }\r\n      });\r\n    }\r\n\r\n    if (document.getElementById(scriptID)) {\r\n      setTimeout(init)\r\n    } else {\r\n      const tag = document.createElement('script');\r\n      tag.id = scriptID;\r\n      tag.src = 'https://www.youtube.com/iframe_api';\r\n      const firstScriptTag = document.getElementsByTagName('script')[0];\r\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n      window.onYouTubeIframeAPIReady = init\r\n    }\r\n\r\n  }, [])\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setTimeout(() => {\r\n        ref.current?.querySelector('.lty-playbtn')?.click()\r\n      })\r\n    } else {\r\n      if (timer.current) clearInterval(timer.current);\r\n    }\r\n  }, [isOpen])\r\n  return (\r\n    <Modal isCentered isOpen={isOpen} onClose={onClose} size=\"xl\" autoFocus={false}>\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalCloseButton />\r\n        <ModalBody px=\"3em\" py=\"2em\" ref={ref}>\r\n          <LiteYouTubeEmbed\r\n            id=\"CpM5f41Tbk4\" // 影片ID\r\n            iframeClass=\"yt-iframe\"\r\n            params=\"enablejsapi=1\"\r\n            title=\"YouTube Embed\" // a11y, always provide a title for iFrames: https://dequeuniversity.com/tips/provide-iframe-titles Help the web be accessible ;)\r\n            cookie={process.env.NODE_ENV === 'production'}\r\n            onIframeAdded={loadIframAPI}\r\n          />\r\n        </ModalBody>\r\n      </ModalContent>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default VideoModal\r\n"],"names":["props","_a","useState","preconnected","setPreconnected","_b","iframe","setIframe","videoId","encodeURIComponent","id","videoPlaylisCovertId","playlistCoverId","videoTitle","title","posterImp","poster","paramsImp","params","posterUrl","playlist","ytUrl","noCookie","cookie","iframeSrc","activatedClassImp","activatedClass","adNetworkImp","adNetwork","iframeClassImp","iframeClass","playerClassImp","playerClass","wrapperClassImp","wrapperClass","onIframeAdded","rel","href","as","onPointerOver","onClick","className","style","backgroundImage","width","height","frameBorder","allow","allowFullScreen","src","progress","isOpen","onClose","ref","useRef","timer","loadIframAPI","useCallback","player","scriptID","tracked","handleStateChange","e","data","window","YT","PlayerState","PLAYING","playerTotalTime","getDuration","current","setInterval","playerProgress","getCurrentTime","every","p","trackVideo","clearInterval","init","iframeRef","querySelector","Player","events","onStateChange","document","getElementById","setTimeout","tag","createElement","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","useEffect","click","isCentered","size","autoFocus","px","py","process"],"sourceRoot":""}