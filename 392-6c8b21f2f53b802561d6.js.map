{"version":3,"file":"392-6c8b21f2f53b802561d6.js","mappings":"0PAeMA,EAAQ,CACZ,CACEC,KAAM,OACNC,GAAI,iBAEN,CACED,KAAM,OACNC,GAAI,mBAEN,CACED,KAAM,OACNC,GAAI,iBA+IR,UAzIa,SAAC,GAA2B,IAAD,EAAxBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACdC,GAAUC,EAAAA,EAAAA,KACVC,GAASC,EAAAA,EAAAA,UAAQ,wBAAM,UAAAH,EAAQI,YAAR,eAAcC,QAAO,SAAAC,GAAC,MAAa,eAATA,EAAEC,QAAwB,KAAI,CAACP,IACtF,GAAoCQ,EAAAA,EAAAA,KAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAhB,EAAwBC,QACxB,OACE,gCACE,gBAAC,KAAD,CAAOC,mBAAmB,UACxB,gBAAC,IAAD,CAAMC,MAAOf,EAAO,yBAA2B,QAASgB,WAAW,UAChEZ,EAAOa,OAAS,GACf,gBAAC,IAAD,CAAKC,GAAG,WACN,gBAAC,gBAAD,CACEC,QAAS,WAAO,IAAD,EACblB,KACAmB,EAAAA,EAAAA,IAAU,UAAChB,EAAO,UAAR,aAAC,EAAWN,OAExBuB,SAAS,UACTC,GAAG,IACHC,GAAG,KAPL,UASGnB,EAAO,UATV,aASG,EAAWN,OAIjBD,EAAM2B,KAAI,gBAAG1B,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAT,OACT,gBAAC,aAAD,CAAc0B,OAAO,UAAUJ,SAAS,UAAUK,WAAW,OAAOR,GAAG,WACrE,gBAAC,KAAD,CACEC,QAAS,YACPC,EAAAA,EAAAA,IAAWtB,IAEb6B,QAAM,EACN5B,GAAIA,EACJ6B,QAjCD,IAkCC9B,OAGN,gBAAC,IAAD,CAAKoB,GAAG,WACN,gBAAC,WAAD,CACEW,GAAIC,EAAAA,GACJL,OAAO,UACPE,QAAM,EACN5B,GAAG,cACHsB,SAAS,UACTU,aAAa,SACbH,QA7CC,GA8CDT,QAAS,kBAAMC,EAAAA,EAAAA,IAAW,UAR5B,WAaN,gBAAC,KAAD,CAAOY,SAAS,UACd,gBAAC,aAAD,CACEH,GAAII,EAAAA,EACJF,aAAa,IACbG,GAAIvB,EAAS,cAAgB,cAC7BI,MAAOJ,EAAS,QAAUX,EAAO,cAAgB,QACjDmC,OAAQ,CACND,GAAI,cACJnB,MAAO,SAETqB,OAAQ,CACNF,GAAI,cACJnB,MAAOf,EAAO,cAAgB,SAEhCmB,QAASP,EACTyB,OAAQC,EAAAA,GAAAA,aACRC,MAAOD,EAAAA,GAAAA,aACPf,GAAG,IACH,aAAW,MAEX,gBAAC,IAAD,CAAMM,GAAIlB,EAAS6B,EAAAA,IAAiBC,EAAAA,IAAeC,GAAGC,EAAAA,EAAAA,IAAW,UAAW,QAASC,GAAGD,EAAAA,EAAAA,IAAW,UAAW","sources":["webpack://styled-gatsby-starter/./src/containers/Menu.js"],"sourcesContent":["import React, { useMemo } from 'react'\nimport { AiOutlineMenu, AiOutlineClose } from \"react-icons/ai\";\nimport {\n  useDisclosure,\n  Icon,\n  Flex,\n} from \"@chakra-ui/react\"\nimport { Link } from 'react-scroll'\n\nimport Box from '../components/Box';\nimport Button from '../components/Button';\nimport theme, { Media, responsive } from '../components/ThemeProvider/theme';\nimport useCsvButton from './useCsvButton'\nimport { trackClick } from '../utils/trackEvent';\n\nconst links = [\n  {\n    name: '兩大焦點',\n    to: 'section-focus'\n  },\n  {\n    name: '永續三贏',\n    to: 'section-subject'\n  },\n  {\n    name: '基金檔案',\n    to: 'section-fund'\n  },\n]\n\nconst offset = 78\n\nconst Menu = ({ dark, modalonOpen }) => {\n  const buttons = useCsvButton()\n  const videos = useMemo(() => buttons.data?.filter(d => d.id === 'header-vid') || [], [buttons])\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Media greaterThanOrEqual=\"tablet\">\n        <Flex color={dark ? 'custom.headerTextGreen' : 'white'} alignItems=\"center\">\n          {videos.length > 0 && (\n            <Box mx=\"1.875em\">\n              <Button.Transparent\n                onClick={() => {\n                  modalonOpen()\n                  trackClick(videos[0]?.name)\n                }}\n                fontSize=\"1.125em\"\n                py=\"0\"\n                px=\"0\"\n              >\n                {videos[0]?.name}\n              </Button.Transparent>\n            </Box>\n          )}\n          {links.map(({ name, to }) => (\n            <Box.Relative cursor=\"pointer\" fontSize=\"1.125em\" fontWeight=\"bold\" mx=\"1.875em\">\n              <Link\n                onClick={() => {\n                  trackClick(name)\n                }}\n                smooth\n                to={to}\n                offset={-offset}\n              >{name}</Link>\n            </Box.Relative>\n          ))}\n          <Box mx=\"1.875em\">\n            <Button.Orange\n              as={Link}\n              cursor=\"pointer\"\n              smooth\n              to=\"section-buy\"\n              fontSize=\"1.125em\"\n              borderRadius=\"1.25em\"\n              offset={-offset}\n              onClick={() => trackClick('申購請洽')}\n            >申購請洽</Button.Orange>\n          </Box>\n        </Flex>\n      </Media>\n      <Media lessThan=\"tablet\">\n        <Box.Relative\n          as={Button}\n          borderRadius=\"0\"\n          bg={isOpen ? 'custom.blue' : 'transparent'}\n          color={isOpen ? 'white' : dark ? 'custom.blue' : 'white'}\n          _hover={{\n            bg: 'custom.blue',\n            color: 'white',\n          }}\n          _focus={{\n            bg: 'transparent',\n            color: dark ? 'custom.blue' : 'white',\n          }}\n          onClick={onOpen}\n          height={theme.headerHeight}\n          width={theme.headerHeight}\n          px=\"0\"\n          aria-label=\"選單\"\n        >\n          <Icon as={isOpen ? AiOutlineClose : AiOutlineMenu} w={responsive('1.25rem', '2rem')} h={responsive('1.25rem', '2rem')} />\n        </Box.Relative>\n        {/* <Drawer\n          isOpen={isOpen}\n          placement=\"right\"\n          onClose={onClose}\n          size=\"md\"\n          preserveScrollBarGap\n        >\n          <DrawerContent bg=\"custom.blue\" style={{ top:theme.headerHeight }} height=\"auto\">\n            <DrawerBody height=\"100%\">\n              {videos.length > 0 && (\n                <Box>\n                  <Button.Transparent\n                    width=\"100%\"\n                    py=\"1.5rem\"\n                    borderBottom=\"1px solid white\"\n                    borderRadius=\"0\"\n                    onClick={() => {\n                      modalonOpen()\n                      trackClick(videos[0]?.name)\n                    }}\n                  >\n                    {videos[0]?.name}\n                  </Button.Transparent>\n                </Box>\n              )}\n              {links.map(({ name, to }, i) => (\n                <Box key={i}>\n                  <Button.Transparent\n                    width=\"100%\"\n                    offset={-offset}\n                    py=\"1.5rem\"\n                    as={Link}\n                    smooth\n                    to={to}\n                    borderBottom=\"1px solid white\"\n                    borderRadius=\"0\"\n                    onClick={() => {\n                      trackClick(name)\n                      onClose()\n                    }}\n                  >{name}</Button.Transparent>\n                </Box>\n              ))}\n            </DrawerBody>\n            <DrawerFooter>\n              <Button.Orange\n                as={Link}\n                smooth\n                to=\"section-buy\"\n                width=\"100%\"\n                fontSize=\"1em\"\n                py=\"1rem\"\n                offset={-offset}\n                onClick={() => {\n                  trackClick('申購請洽')\n                  onClose()\n                }}\n              >申購請洽</Button.Orange>\n            </DrawerFooter>\n          </DrawerContent>\n        </Drawer> */}\n      </Media>\n    </>\n  )\n}\n\nexport default Menu\n"],"names":["links","name","to","dark","modalonOpen","buttons","useCsvButton","videos","useMemo","data","filter","d","id","useDisclosure","isOpen","onOpen","onClose","greaterThanOrEqual","color","alignItems","length","mx","onClick","trackClick","fontSize","py","px","map","cursor","fontWeight","smooth","offset","as","Link","borderRadius","lessThan","Button","bg","_hover","_focus","height","theme","width","AiOutlineClose","AiOutlineMenu","w","responsive","h"],"sourceRoot":""}